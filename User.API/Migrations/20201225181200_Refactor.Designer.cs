// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using User.API.Infrastructure;

namespace User.API.Migrations
{
    [DbContext(typeof(UserSqlContext))]
    [Migration("20201225181200_Refactor")]
    partial class Refactor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("User.API.Model.Generalities.Citizenship", b =>
                {
                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("PersonJmbg")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("PersonId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CountryID", "PersonJmbg");

                    b.HasIndex("PersonId");

                    b.ToTable("Citizenships");
                });

            modelBuilder.Entity("User.API.Model.Generalities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CityOfBirthId")
                        .HasColumnType("int");

                    b.Property<int>("CityOfResidenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CityOfBirthId");

                    b.HasIndex("CityOfResidenceId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("User.API.Model.HospitalResources.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("User.API.Model.HospitalResources.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Purpose")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("RequiresRenovationToMove")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("User.API.Model.HospitalResources.EquipmentUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CurrentLocationId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("EquipmentUnits");
                });

            modelBuilder.Entity("User.API.Model.HospitalResources.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("User.API.Model.Locale.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("User.API.Model.Locale.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("User.API.Model.Medication.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsAllergen")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("User.API.Model.Medication.IntakeInstructions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Dosage")
                        .HasColumnType("double");

                    b.Property<string>("DosageUnit")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TimesPerDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IntakeInstructions");
                });

            modelBuilder.Entity("User.API.Model.Medication.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("User.API.Model.Medication.MedicationPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DiagnosisId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("ExaminationReportId")
                        .HasColumnType("int");

                    b.Property<int>("InstructionsId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("ExaminationReportId");

                    b.HasIndex("InstructionsId");

                    b.HasIndex("MedicationId");

                    b.ToTable("MedicationPrescriptions");
                });

            modelBuilder.Entity("User.API.Model.Medication.SideEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.ToTable("SideEffect");
                });

            modelBuilder.Entity("User.API.Model.Schedule.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("ExaminationReportId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<int?>("ProcedureDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferredFromId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ExaminationReportId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProcedureDetailsId");

                    b.HasIndex("ReferredFromId");

                    b.HasIndex("RoomId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("User.API.Model.Schedule.ExaminationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ExaminationReports");
                });

            modelBuilder.Entity("User.API.Model.Schedule.ProcedureDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("RequiredSpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequiredSpecialtyId");

                    b.ToTable("ProcedureDetails");
                });

            modelBuilder.Entity("User.API.Model.Users.Employees.Doctors.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Jmbg")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Jmbg");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("User.API.Model.Users.Employees.Doctors.DoctorSpecialty", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("User.API.Model.Users.Employees.Doctors.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignedExamRoomId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedExamRoomId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("User.API.Model.Users.Employees.Doctors.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("User.API.Model.Users.Patients.MedicalHistory.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Allergen")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Prevention")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Symptoms")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("User.API.Model.Users.Patients.MedicalHistory.Diagnosis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ExaminationReportId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInjury")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationReportId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("User.API.Model.Users.Patients.MedicalHistory.Relationship.AllergyManifestation", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<string>("Intensity")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("PatientId", "AllergyId");

                    b.HasIndex("AllergyId");

                    b.ToTable("AllergyManifestations");
                });

            modelBuilder.Entity("User.API.Model.Users.Patients.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Jmbg")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("Jmbg");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("User.API.Model.Users.UserAccounts.DoctorAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorAccounts");
                });

            modelBuilder.Entity("User.API.Model.Users.UserAccounts.PatientAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<bool>("RespondedToSurvey")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAccounts");
                });

            modelBuilder.Entity("User.API.Model.Generalities.Citizenship", b =>
                {
                    b.HasOne("User.API.Model.Locale.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.API.Model.Generalities.Person", null)
                        .WithMany("Citizenships")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("User.API.Model.Generalities.Person", b =>
                {
                    b.HasOne("User.API.Model.Locale.City", "CityOfBirth")
                        .WithMany()
                        .HasForeignKey("CityOfBirthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.API.Model.Locale.City", "CityOfResidence")
                        .WithMany()
                        .HasForeignKey("CityOfResidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.API.Model.HospitalResources.EquipmentUnit", b =>
                {
                    b.HasOne("User.API.Model.HospitalResources.Room", "CurrentLocation")
                        .WithMany("Equipment")
                        .HasForeignKey("CurrentLocationId");

                    b.HasOne("User.API.Model.HospitalResources.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.API.Model.HospitalResources.Room", b =>
                {
                    b.HasOne("User.API.Model.HospitalResources.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.API.Model.Locale.City", b =>
                {
                    b.HasOne("User.API.Model.Locale.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.API.Model.Medication.Ingredient", b =>
                {
                    b.HasOne("User.API.Model.Medication.Medication", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.API.Model.Medication.MedicationPrescription", b =>
                {
                    b.HasOne("User.API.Model.Users.Patients.MedicalHistory.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("User.API.Model.Schedule.ExaminationReport", "ExaminationReport")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ExaminationReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.API.Model.Medication.IntakeInstructions", "Instructions")
                        .WithMany()
                        .HasForeignKey("InstructionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.API.Model.Medication.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.API.Model.Medication.SideEffect", b =>
                {
                    b.HasOne("User.API.Model.Medication.Medication", null)
                        .WithMany("SideEffects")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.API.Model.Schedule.Examination", b =>
                {
                    b.HasOne("User.API.Model.Users.Employees.Doctors.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.API.Model.Schedule.ExaminationReport", "ExaminationReport")
                        .WithMany()
                        .HasForeignKey("ExaminationReportId");

                    b.HasOne("User.API.Model.Users.Patients.Patient", "Patient")
                        .WithMany("Examinations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.API.Model.Schedule.ProcedureDetails", "ProcedureDetails")
                        .WithMany()
                        .HasForeignKey("ProcedureDetailsId");

                    b.HasOne("User.API.Model.Schedule.Examination", "ReferredFrom")
                        .WithMany()
                        .HasForeignKey("ReferredFromId");

                    b.HasOne("User.API.Model.HospitalResources.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("User.API.Model.Utilities.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("ExaminationId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("ExaminationId");

                            b1.ToTable("Examinations");

                            b1.WithOwner()
                                .HasForeignKey("ExaminationId");
                        });
                });

            modelBuilder.Entity("User.API.Model.Schedule.ProcedureDetails", b =>
                {
                    b.HasOne("User.API.Model.Users.Employees.Doctors.Specialty", "RequiredSpecialty")
                        .WithMany()
                        .HasForeignKey("RequiredSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.API.Model.Users.Employees.Doctors.Doctor", b =>
                {
                    b.HasOne("User.API.Model.HospitalResources.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.API.Model.Generalities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Jmbg")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.API.Model.Users.Employees.Doctors.DoctorSpecialty", b =>
                {
                    b.HasOne("User.API.Model.Users.Employees.Doctors.Doctor", "Doctor")
                        .WithMany("Specialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.API.Model.Users.Employees.Doctors.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.API.Model.Users.Employees.Doctors.Shift", b =>
                {
                    b.HasOne("User.API.Model.HospitalResources.Room", "AssignedExamRoom")
                        .WithMany()
                        .HasForeignKey("AssignedExamRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.API.Model.Users.Employees.Doctors.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("User.API.Model.Utilities.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("ShiftId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("ShiftId");

                            b1.ToTable("Shifts");

                            b1.WithOwner()
                                .HasForeignKey("ShiftId");
                        });
                });

            modelBuilder.Entity("User.API.Model.Users.Patients.MedicalHistory.Diagnosis", b =>
                {
                    b.HasOne("User.API.Model.Schedule.ExaminationReport", null)
                        .WithMany("Diagnoses")
                        .HasForeignKey("ExaminationReportId");
                });

            modelBuilder.Entity("User.API.Model.Users.Patients.MedicalHistory.Relationship.AllergyManifestation", b =>
                {
                    b.HasOne("User.API.Model.Users.Patients.MedicalHistory.Allergy", "Allergy")
                        .WithMany()
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User.API.Model.Users.Patients.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User.API.Model.Users.Patients.Patient", b =>
                {
                    b.HasOne("User.API.Model.Generalities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Jmbg");
                });

            modelBuilder.Entity("User.API.Model.Users.UserAccounts.DoctorAccount", b =>
                {
                    b.HasOne("User.API.Model.Users.Employees.Doctors.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("User.API.Model.Users.UserAccounts.Credentials", "Credentials", b1 =>
                        {
                            b1.Property<int>("DoctorAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("Password")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("Username")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("DoctorAccountId");

                            b1.ToTable("DoctorAccounts");

                            b1.WithOwner()
                                .HasForeignKey("DoctorAccountId");
                        });
                });

            modelBuilder.Entity("User.API.Model.Users.UserAccounts.PatientAccount", b =>
                {
                    b.HasOne("User.API.Model.Users.Patients.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("User.API.Model.Users.UserAccounts.Credentials", "Credentials", b1 =>
                        {
                            b1.Property<int>("PatientAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("Password")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("Username")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("PatientAccountId");

                            b1.ToTable("PatientAccounts");

                            b1.WithOwner()
                                .HasForeignKey("PatientAccountId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
