// <auto-generated />
using System;
using HealthcareBase.Model.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthcareBase.Migrations
{
    [DbContext(typeof(MySqlContext))]
    partial class MySqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Blog.BlogAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("BlogAuthors");
                });

            modelBuilder.Entity("Model.Blog.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("Model.HospitalResources.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("HospitalizationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("HospitalizationTypeId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Model.HospitalResources.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("HospitalizationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProcedureTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("RequiresRenovationToMove")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalizationTypeId");

                    b.HasIndex("ProcedureTypeId");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("Model.HospitalResources.EquipmentUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CurrentLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("HospitalizationId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("HospitalizationId");

                    b.ToTable("EquipmentUnits");
                });

            modelBuilder.Entity("Model.HospitalResources.MedicalConsumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ConsumableTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Manufacutrer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConsumableTypeId");

                    b.ToTable("MedicalConsumables");
                });

            modelBuilder.Entity("Model.HospitalResources.MedicalConsumableType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Purpose")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("MedicalConsumableTypes");
                });

            modelBuilder.Entity("Model.HospitalResources.Renovation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Renovations");
                });

            modelBuilder.Entity("Model.HospitalResources.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Model.Medication.IntakeInstructions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Dosage")
                        .HasColumnType("double");

                    b.Property<string>("DosageUnit")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TimesPerDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IntakeInstructions");
                });

            modelBuilder.Entity("Model.Medication.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("Model.Medication.MedicationPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiagnosisId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("ExaminationReportId")
                        .HasColumnType("int");

                    b.Property<int>("InstructionsId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("ExaminationReportId");

                    b.HasIndex("InstructionsId");

                    b.HasIndex("MedicationId");

                    b.ToTable("MedicationPrescriptions");
                });

            modelBuilder.Entity("Model.Miscellaneous.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Allergen")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Prevention")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Symptoms")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("Model.Miscellaneous.Diagnosis", b =>
                {
                    b.Property<string>("Icd")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsInjury")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Icd");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Model.Notifications.HospitalizationNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HospitalizationId")
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UpdateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalizationId");

                    b.HasIndex("UserId");

                    b.ToTable("HospitalizationNotifications");
                });

            modelBuilder.Entity("Model.Notifications.MedicationPrescriptionNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicationPrescriptionNotifications");
                });

            modelBuilder.Entity("Model.Notifications.ProcedureNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UpdateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProcedureNotifications");
                });

            modelBuilder.Entity("Model.Notifications.RequestNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("RequestNotifications");
                });

            modelBuilder.Entity("Model.Requests.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReviewerComment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("SenderId");

                    b.ToTable("Request");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Request");
                });

            modelBuilder.Entity("Model.Schedule.Hospitalizations.Hospitalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CauseOfAdmission")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DiagnosisId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("DischargeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<int?>("HospitalizationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("HospitalizationTypeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Hospitalizations");
                });

            modelBuilder.Entity("Model.Schedule.Hospitalizations.HospitalizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UsualNumberOfDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HospitalizationType");
                });

            modelBuilder.Entity("Model.Schedule.Procedures.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AvoidChangingDoctor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AvoidChangingRoom")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AvoidChangingTime")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ExaminationReportId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("ProcedureTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ReferredFromId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ExaminationReportId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProcedureTypeId");

                    b.HasIndex("ReferredFromId");

                    b.HasIndex("RoomId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("Model.Schedule.Procedures.ExaminationForPatient", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("ExaminationId")
                        .HasColumnType("int");

                    b.HasKey("MedicalRecordId", "ExaminationId");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationForPatients");
                });

            modelBuilder.Entity("Model.Schedule.Procedures.ProcedureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("SchedulableByPatient")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("ProcedureTypes");
                });

            modelBuilder.Entity("Model.Schedule.Procedures.Surgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AvoidChangingDoctor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AvoidChangingRoom")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AvoidChangingTime")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CauseOfSurgery")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DiagnosisId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("ProcedureTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ReferredFromId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProcedureTypeId");

                    b.HasIndex("ReferredFromId");

                    b.HasIndex("RoomId");

                    b.ToTable("Surgeries");
                });

            modelBuilder.Entity("Model.Schedule.Procedures.SurgeryForPatient", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("SurgeryId")
                        .HasColumnType("int");

                    b.HasKey("MedicalRecordId", "SurgeryId");

                    b.HasIndex("SurgeryId");

                    b.ToTable("SurgeryForPatients");
                });

            modelBuilder.Entity("Model.StorageRecords.ConsumableStorageRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvailableAmount")
                        .HasColumnType("int");

                    b.Property<int>("ConsumableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsumableId");

                    b.ToTable("ConsumableStorageRecords");
                });

            modelBuilder.Entity("Model.StorageRecords.MedicationStorageRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvailableAmount")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.ToTable("MedicationStorageRecords");
                });

            modelBuilder.Entity("Model.Users.Employee.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Jmbg")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("Jmbg");

                    b.ToTable("Employees");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Employee");
                });

            modelBuilder.Entity("Model.Users.Employee.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignedExamRoomId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedExamRoomId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Model.Users.Employee.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DoctorEmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("MedicationInputRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProcedureTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorEmployeeID");

                    b.HasIndex("MedicationInputRequestId");

                    b.HasIndex("ProcedureTypeId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("Model.Users.Generalities.Citizenship", b =>
                {
                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("PersonJmbg")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CountryID", "PersonJmbg");

                    b.HasIndex("PersonJmbg");

                    b.ToTable("Citizenships");
                });

            modelBuilder.Entity("Model.Users.Generalities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Model.Users.Generalities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Model.Users.Generalities.Person", b =>
                {
                    b.Property<string>("Jmbg")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CityOfBirthId")
                        .HasColumnType("int");

                    b.Property<int>("CityOfResidenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("MartialStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Jmbg");

                    b.HasIndex("CityOfBirthId");

                    b.HasIndex("CityOfResidenceId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Model.Users.Patient.MedicalHistory.AllergyManifestation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<string>("Intensity")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("AllergyManifestations");
                });

            modelBuilder.Entity("Model.Users.Patient.MedicalHistory.DiagnosisDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DiagnosisId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("ExaminationReportId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("ExaminationReportId");

                    b.ToTable("DiagnosisDetails");
                });

            modelBuilder.Entity("Model.Users.Patient.MedicalHistory.ExaminationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ExaminationReports");
                });

            modelBuilder.Entity("Model.Users.Patient.MedicalHistory.FamilyMemberDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DiagnosisId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("DiscoveredAtAge")
                        .HasColumnType("int");

                    b.Property<string>("FamilyRelation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Lethal")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("FamilyMemberDiagnosis");
                });

            modelBuilder.Entity("Model.Users.Patient.MedicalHistory.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Model.Users.Patient.MedicalHistory.PersonalHistoryDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DiagnosisId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("DiscoveredAtAge")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("PersonalHistories");
                });

            modelBuilder.Entity("Model.Users.Patient.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Jmbg")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("Jmbg");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Model.Users.UserAccounts.FavoriteDoctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientAccountId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "PatientAccountId");

                    b.HasIndex("PatientAccountId");

                    b.ToTable("FavoriteDoctors");
                });

            modelBuilder.Entity("Model.Users.UserAccounts.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("UserAccount");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserAccount");
                });

            modelBuilder.Entity("Model.Users.UserFeedback.PatientSurveyResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BestDoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceRating")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BestDoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientSurveyResponses");
                });

            modelBuilder.Entity("Model.Users.UserFeedback.UserFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserComment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isPublished")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserFeedbacks");
                });

            modelBuilder.Entity("Model.Requests.ClearDoctorsSchedule", b =>
                {
                    b.HasBaseType("Model.Requests.Request");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasIndex("DoctorId");

                    b.HasDiscriminator().HasValue("ClearDoctorsSchedule");
                });

            modelBuilder.Entity("Model.Requests.ClearRoomsSchedule", b =>
                {
                    b.HasBaseType("Model.Requests.Request");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasIndex("RoomId");

                    b.HasDiscriminator().HasValue("ClearRoomsSchedule");
                });

            modelBuilder.Entity("Model.Requests.MedicationInputRequest", b =>
                {
                    b.HasBaseType("Model.Requests.Request");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.HasIndex("MedicationId");

                    b.HasDiscriminator().HasValue("MedicationInputRequest");
                });

            modelBuilder.Entity("Model.Requests.ScheduleHospitalization", b =>
                {
                    b.HasBaseType("Model.Requests.Request");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasIndex("PatientId");

                    b.HasIndex("TypeId");

                    b.HasDiscriminator().HasValue("ScheduleHospitalization");
                });

            modelBuilder.Entity("Model.Requests.ScheduleProcedure", b =>
                {
                    b.HasBaseType("Model.Requests.Request");

                    b.Property<int>("PatientId")
                        .HasColumnName("ScheduleProcedure_PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnName("ScheduleProcedure_TypeId")
                        .HasColumnType("int");

                    b.HasIndex("PatientId");

                    b.HasIndex("TypeId");

                    b.HasDiscriminator().HasValue("ScheduleProcedure");
                });

            modelBuilder.Entity("Model.Users.Employee.Doctor", b =>
                {
                    b.HasBaseType("Model.Users.Employee.Employee");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("Model.Users.UserAccounts.EmployeeAccount", b =>
                {
                    b.HasBaseType("Model.Users.UserAccounts.UserAccount");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasIndex("EmployeeId");

                    b.HasDiscriminator().HasValue("EmployeeAccount");
                });

            modelBuilder.Entity("Model.Users.UserAccounts.PatientAccount", b =>
                {
                    b.HasBaseType("Model.Users.UserAccounts.UserAccount");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<bool>("RespondedToSurvey")
                        .HasColumnType("tinyint(1)");

                    b.HasIndex("PatientId");

                    b.HasDiscriminator().HasValue("PatientAccount");
                });

            modelBuilder.Entity("Model.Blog.BlogAuthor", b =>
                {
                    b.HasOne("Model.Users.Employee.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Blog.BlogPost", b =>
                {
                    b.HasOne("Model.Blog.BlogAuthor", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.HospitalResources.Department", b =>
                {
                    b.HasOne("Model.Schedule.Hospitalizations.HospitalizationType", null)
                        .WithMany("AppropriateDepartments")
                        .HasForeignKey("HospitalizationTypeId");
                });

            modelBuilder.Entity("Model.HospitalResources.EquipmentType", b =>
                {
                    b.HasOne("Model.Schedule.Hospitalizations.HospitalizationType", null)
                        .WithMany("NecessaryEquipment")
                        .HasForeignKey("HospitalizationTypeId");

                    b.HasOne("Model.Schedule.Procedures.ProcedureType", null)
                        .WithMany("NecessaryEquipment")
                        .HasForeignKey("ProcedureTypeId");
                });

            modelBuilder.Entity("Model.HospitalResources.EquipmentUnit", b =>
                {
                    b.HasOne("Model.HospitalResources.Room", "CurrentLocation")
                        .WithMany("Equipment")
                        .HasForeignKey("CurrentLocationId");

                    b.HasOne("Model.HospitalResources.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId");

                    b.HasOne("Model.Schedule.Hospitalizations.Hospitalization", "Hospitalization")
                        .WithMany("EquipmentInUse")
                        .HasForeignKey("HospitalizationId");
                });

            modelBuilder.Entity("Model.HospitalResources.MedicalConsumable", b =>
                {
                    b.HasOne("Model.HospitalResources.MedicalConsumableType", "ConsumableType")
                        .WithMany()
                        .HasForeignKey("ConsumableTypeId");
                });

            modelBuilder.Entity("Model.HospitalResources.Renovation", b =>
                {
                    b.HasOne("Model.HospitalResources.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Model.Utilities.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("RenovationId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("RenovationId");

                            b1.ToTable("Renovations");

                            b1.WithOwner()
                                .HasForeignKey("RenovationId");
                        });
                });

            modelBuilder.Entity("Model.HospitalResources.Room", b =>
                {
                    b.HasOne("Model.HospitalResources.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Model.Medication.Medication", b =>
                {
                    b.HasOne("Model.Medication.Medication", null)
                        .WithMany("Alternatives")
                        .HasForeignKey("MedicationId");

                    b.OwnsMany("Model.Medication.Amount", "Ingredients", b1 =>
                        {
                            b1.Property<int>("MedicationId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Unit")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<double>("Value")
                                .HasColumnType("double");

                            b1.HasKey("MedicationId", "Id");

                            b1.ToTable("Amount");

                            b1.WithOwner()
                                .HasForeignKey("MedicationId");

                            b1.OwnsOne("Model.Medication.Ingredient", "Ingredients", b2 =>
                                {
                                    b2.Property<int>("AmountMedicationId")
                                        .HasColumnType("int");

                                    b2.Property<int>("AmountId")
                                        .HasColumnType("int");

                                    b2.Property<bool>("IsAllergen")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                                    b2.HasKey("AmountMedicationId", "AmountId");

                                    b2.ToTable("Amount");

                                    b2.WithOwner()
                                        .HasForeignKey("AmountMedicationId", "AmountId");
                                });
                        });

                    b.OwnsMany("Model.Medication.Frequency", "SideEffects", b1 =>
                        {
                            b1.Property<int>("MedicationId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(24)");

                            b1.HasKey("MedicationId", "Id");

                            b1.ToTable("Frequency");

                            b1.WithOwner()
                                .HasForeignKey("MedicationId");

                            b1.OwnsOne("Model.Medication.SideEffect", "SideEffects", b2 =>
                                {
                                    b2.Property<int>("FrequencyMedicationId")
                                        .HasColumnType("int");

                                    b2.Property<int>("FrequencyId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Name")
                                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                                    b2.HasKey("FrequencyMedicationId", "FrequencyId");

                                    b2.ToTable("Frequency");

                                    b2.WithOwner()
                                        .HasForeignKey("FrequencyMedicationId", "FrequencyId");
                                });
                        });
                });

            modelBuilder.Entity("Model.Medication.MedicationPrescription", b =>
                {
                    b.HasOne("Model.Miscellaneous.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Model.Users.Patient.MedicalHistory.ExaminationReport", "ExaminationReport")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ExaminationReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Medication.IntakeInstructions", "Instructions")
                        .WithMany()
                        .HasForeignKey("InstructionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Medication.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Notifications.HospitalizationNotification", b =>
                {
                    b.HasOne("Model.Schedule.Hospitalizations.Hospitalization", "Hospitalization")
                        .WithMany()
                        .HasForeignKey("HospitalizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.UserAccounts.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Notifications.MedicationPrescriptionNotification", b =>
                {
                    b.HasOne("Model.Medication.MedicationPrescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.UserAccounts.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Notifications.ProcedureNotification", b =>
                {
                    b.HasOne("Model.Users.UserAccounts.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Notifications.RequestNotification", b =>
                {
                    b.HasOne("Model.Requests.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.UserAccounts.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Requests.Request", b =>
                {
                    b.HasOne("Model.Users.UserAccounts.EmployeeAccount", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.UserAccounts.EmployeeAccount", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Schedule.Hospitalizations.Hospitalization", b =>
                {
                    b.HasOne("Model.Miscellaneous.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Model.Schedule.Hospitalizations.HospitalizationType", "HospitalizationType")
                        .WithMany()
                        .HasForeignKey("HospitalizationTypeId");

                    b.HasOne("Model.Users.Patient.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.HospitalResources.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.OwnsOne("Model.Utilities.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("HospitalizationId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("HospitalizationId");

                            b1.ToTable("Hospitalizations");

                            b1.WithOwner()
                                .HasForeignKey("HospitalizationId");
                        });
                });

            modelBuilder.Entity("Model.Schedule.Procedures.Examination", b =>
                {
                    b.HasOne("Model.Users.Employee.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.Patient.MedicalHistory.ExaminationReport", "ExaminationReport")
                        .WithMany()
                        .HasForeignKey("ExaminationReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.Patient.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Schedule.Procedures.ProcedureType", "ProcedureType")
                        .WithMany()
                        .HasForeignKey("ProcedureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Schedule.Procedures.Examination", "ReferredFrom")
                        .WithMany()
                        .HasForeignKey("ReferredFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.HospitalResources.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Model.Utilities.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("ExaminationId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("ExaminationId");

                            b1.ToTable("Examinations");

                            b1.WithOwner()
                                .HasForeignKey("ExaminationId");
                        });
                });

            modelBuilder.Entity("Model.Schedule.Procedures.ExaminationForPatient", b =>
                {
                    b.HasOne("Model.Schedule.Procedures.Examination", "Examination")
                        .WithMany()
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.Patient.MedicalHistory.MedicalRecord", null)
                        .WithMany("Examinations")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Schedule.Procedures.Surgery", b =>
                {
                    b.HasOne("Model.Miscellaneous.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Model.Users.Employee.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.Patient.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Schedule.Procedures.ProcedureType", "ProcedureType")
                        .WithMany()
                        .HasForeignKey("ProcedureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Schedule.Procedures.Examination", "ReferredFrom")
                        .WithMany()
                        .HasForeignKey("ReferredFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.HospitalResources.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Model.Utilities.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("SurgeryId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("SurgeryId");

                            b1.ToTable("Surgeries");

                            b1.WithOwner()
                                .HasForeignKey("SurgeryId");
                        });
                });

            modelBuilder.Entity("Model.Schedule.Procedures.SurgeryForPatient", b =>
                {
                    b.HasOne("Model.Users.Patient.MedicalHistory.MedicalRecord", null)
                        .WithMany("Surgeries")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Schedule.Procedures.Surgery", "Surgery")
                        .WithMany()
                        .HasForeignKey("SurgeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.StorageRecords.ConsumableStorageRecord", b =>
                {
                    b.HasOne("Model.HospitalResources.MedicalConsumable", "Consumable")
                        .WithMany()
                        .HasForeignKey("ConsumableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Model.StorageRecords.AmountChangeRecord", "SupplyHistory", b1 =>
                        {
                            b1.Property<int>("ConsumableStorageRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("Amount")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("ConsumableStorageRecordId", "Id");

                            b1.ToTable("ConsumableStorageRecords_SupplyHistory");

                            b1.WithOwner()
                                .HasForeignKey("ConsumableStorageRecordId");
                        });

                    b.OwnsMany("Model.StorageRecords.AmountChangeRecord", "UsageHistory", b1 =>
                        {
                            b1.Property<int>("ConsumableStorageRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("Amount")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("ConsumableStorageRecordId", "Id");

                            b1.ToTable("ConsumableStorageRecords_UsageHistory");

                            b1.WithOwner()
                                .HasForeignKey("ConsumableStorageRecordId");
                        });
                });

            modelBuilder.Entity("Model.StorageRecords.MedicationStorageRecord", b =>
                {
                    b.HasOne("Model.Medication.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Model.StorageRecords.AmountChangeRecord", "SupplyHistory", b1 =>
                        {
                            b1.Property<int>("MedicationStorageRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("Amount")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("MedicationStorageRecordId", "Id");

                            b1.ToTable("MedicationStorageRecords_SupplyHistory");

                            b1.WithOwner()
                                .HasForeignKey("MedicationStorageRecordId");
                        });

                    b.OwnsMany("Model.StorageRecords.AmountChangeRecord", "UsageHistory", b1 =>
                        {
                            b1.Property<int>("MedicationStorageRecordId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("Amount")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("MedicationStorageRecordId", "Id");

                            b1.ToTable("MedicationStorageRecords_UsageHistory");

                            b1.WithOwner()
                                .HasForeignKey("MedicationStorageRecordId");
                        });
                });

            modelBuilder.Entity("Model.Users.Employee.Employee", b =>
                {
                    b.HasOne("Model.Users.Generalities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Jmbg");
                });

            modelBuilder.Entity("Model.Users.Employee.Shift", b =>
                {
                    b.HasOne("Model.HospitalResources.Room", "AssignedExamRoom")
                        .WithMany()
                        .HasForeignKey("AssignedExamRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.Employee.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Model.Utilities.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("ShiftId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("ShiftId");

                            b1.ToTable("Shifts");

                            b1.WithOwner()
                                .HasForeignKey("ShiftId");
                        });
                });

            modelBuilder.Entity("Model.Users.Employee.Specialty", b =>
                {
                    b.HasOne("Model.Users.Employee.Doctor", null)
                        .WithMany("Specialties")
                        .HasForeignKey("DoctorEmployeeID");

                    b.HasOne("Model.Requests.MedicationInputRequest", null)
                        .WithMany("ReviewableBy")
                        .HasForeignKey("MedicationInputRequestId");

                    b.HasOne("Model.Schedule.Procedures.ProcedureType", null)
                        .WithMany("QualifiedSpecialties")
                        .HasForeignKey("ProcedureTypeId");
                });

            modelBuilder.Entity("Model.Users.Generalities.Citizenship", b =>
                {
                    b.HasOne("Model.Users.Generalities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.Generalities.Person", null)
                        .WithMany("Citizenships")
                        .HasForeignKey("PersonJmbg")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.Generalities.City", b =>
                {
                    b.HasOne("Model.Users.Generalities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.Generalities.Person", b =>
                {
                    b.HasOne("Model.Users.Generalities.City", "CityOfBirth")
                        .WithMany()
                        .HasForeignKey("CityOfBirthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.Generalities.City", "CityOfResidence")
                        .WithMany()
                        .HasForeignKey("CityOfResidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.Patient.MedicalHistory.AllergyManifestation", b =>
                {
                    b.HasOne("Model.Miscellaneous.Allergy", "Allergy")
                        .WithMany()
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.Patient.MedicalHistory.MedicalRecord", null)
                        .WithMany("Allergies")
                        .HasForeignKey("MedicalRecordId");
                });

            modelBuilder.Entity("Model.Users.Patient.MedicalHistory.DiagnosisDetails", b =>
                {
                    b.HasOne("Model.Miscellaneous.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Model.Users.Patient.MedicalHistory.ExaminationReport", null)
                        .WithMany("Diagnoses")
                        .HasForeignKey("ExaminationReportId");
                });

            modelBuilder.Entity("Model.Users.Patient.MedicalHistory.FamilyMemberDiagnosis", b =>
                {
                    b.HasOne("Model.Miscellaneous.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Model.Users.Patient.MedicalHistory.MedicalRecord", null)
                        .WithMany("FamilyMemberDiagnoses")
                        .HasForeignKey("MedicalRecordId");
                });

            modelBuilder.Entity("Model.Users.Patient.MedicalHistory.PersonalHistoryDiagnosis", b =>
                {
                    b.HasOne("Model.Miscellaneous.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Model.Users.Patient.MedicalHistory.MedicalRecord", null)
                        .WithMany("PersonalHistoryDiagnoses")
                        .HasForeignKey("MedicalRecordId");
                });

            modelBuilder.Entity("Model.Users.Patient.Patient", b =>
                {
                    b.HasOne("Model.Users.Generalities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Jmbg");

                    b.HasOne("Model.Users.Patient.MedicalHistory.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.UserAccounts.FavoriteDoctor", b =>
                {
                    b.HasOne("Model.Users.Employee.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.UserAccounts.PatientAccount", null)
                        .WithMany("FavouriteDoctors")
                        .HasForeignKey("PatientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.UserFeedback.PatientSurveyResponse", b =>
                {
                    b.HasOne("Model.Users.Employee.Doctor", "BestDoctor")
                        .WithMany()
                        .HasForeignKey("BestDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.UserAccounts.PatientAccount", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.UserFeedback.UserFeedback", b =>
                {
                    b.HasOne("Model.Users.UserAccounts.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Requests.ClearDoctorsSchedule", b =>
                {
                    b.HasOne("Model.Users.Employee.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Model.Utilities.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("ClearDoctorsScheduleId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("ClearDoctorsScheduleId");

                            b1.ToTable("Request");

                            b1.WithOwner()
                                .HasForeignKey("ClearDoctorsScheduleId");
                        });
                });

            modelBuilder.Entity("Model.Requests.ClearRoomsSchedule", b =>
                {
                    b.HasOne("Model.HospitalResources.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Model.Utilities.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("ClearRoomsScheduleId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("ClearRoomsScheduleId");

                            b1.ToTable("Request");

                            b1.WithOwner()
                                .HasForeignKey("ClearRoomsScheduleId");
                        });
                });

            modelBuilder.Entity("Model.Requests.MedicationInputRequest", b =>
                {
                    b.HasOne("Model.Medication.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Requests.ScheduleHospitalization", b =>
                {
                    b.HasOne("Model.Users.Patient.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Schedule.Hospitalizations.HospitalizationType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.OwnsOne("Model.Schedule.SchedulingPreferences.HospitalizationSchedulingPreference", "Preference", b1 =>
                        {
                            b1.Property<int>("ScheduleHospitalizationId")
                                .HasColumnType("int");

                            b1.Property<int>("Duration")
                                .HasColumnType("int");

                            b1.Property<int>("PreferredRoomId")
                                .HasColumnType("int");

                            b1.HasKey("ScheduleHospitalizationId");

                            b1.HasIndex("PreferredRoomId");

                            b1.ToTable("Request");

                            b1.HasOne("Model.HospitalResources.Room", "PreferredRoom")
                                .WithMany()
                                .HasForeignKey("PreferredRoomId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ScheduleHospitalizationId");

                            b1.OwnsOne("Model.Utilities.TimeInterval", "PreferredAdmissionDate", b2 =>
                                {
                                    b2.Property<int>("HospitalizationSchedulingPreferenceScheduleHospitalizationId")
                                        .HasColumnType("int");

                                    b2.Property<DateTime>("End")
                                        .HasColumnType("datetime(6)");

                                    b2.Property<DateTime>("Start")
                                        .HasColumnType("datetime(6)");

                                    b2.HasKey("HospitalizationSchedulingPreferenceScheduleHospitalizationId");

                                    b2.ToTable("Request");

                                    b2.WithOwner()
                                        .HasForeignKey("HospitalizationSchedulingPreferenceScheduleHospitalizationId");
                                });
                        });
                });

            modelBuilder.Entity("Model.Requests.ScheduleProcedure", b =>
                {
                    b.HasOne("Model.Users.Patient.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Schedule.Procedures.ProcedureType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.OwnsOne("Model.Schedule.SchedulingPreferences.ProcedureSchedulingPreference", "Preference", b1 =>
                        {
                            b1.Property<int>("ScheduleProcedureId")
                                .HasColumnType("int");

                            b1.Property<int>("PreferredDoctorId")
                                .HasColumnType("int");

                            b1.Property<int>("PreferredRoomId")
                                .HasColumnName("ProcedureSchedulingPreference_Preference_PreferredRoomId")
                                .HasColumnType("int");

                            b1.HasKey("ScheduleProcedureId");

                            b1.HasIndex("PreferredDoctorId");

                            b1.HasIndex("PreferredRoomId");

                            b1.ToTable("Request");

                            b1.HasOne("Model.Users.Employee.Doctor", "PreferredDoctor")
                                .WithMany()
                                .HasForeignKey("PreferredDoctorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("Model.HospitalResources.Room", "PreferredRoom")
                                .WithMany()
                                .HasForeignKey("PreferredRoomId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ScheduleProcedureId");

                            b1.OwnsOne("Model.Utilities.TimeIntervalCollection", "PreferredTime", b2 =>
                                {
                                    b2.Property<int>("ProcedureSchedulingPreferenceScheduleProcedureId")
                                        .HasColumnType("int");

                                    b2.HasKey("ProcedureSchedulingPreferenceScheduleProcedureId");

                                    b2.ToTable("Request");

                                    b2.WithOwner()
                                        .HasForeignKey("ProcedureSchedulingPreferenceScheduleProcedureId");

                                    b2.OwnsMany("Model.Utilities.TimeInterval", "Intervals", b3 =>
                                        {
                                            b3.Property<int>("TimeIntervalCollectionProcedureSchedulingPreferenceScheduleProcedureId")
                                                .HasColumnType("int");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int");

                                            b3.Property<DateTime>("End")
                                                .HasColumnType("datetime(6)");

                                            b3.Property<DateTime>("Start")
                                                .HasColumnType("datetime(6)");

                                            b3.HasKey("TimeIntervalCollectionProcedureSchedulingPreferenceScheduleProcedureId", "Id");

                                            b3.ToTable("Request_Intervals");

                                            b3.WithOwner()
                                                .HasForeignKey("TimeIntervalCollectionProcedureSchedulingPreferenceScheduleProcedureId");
                                        });
                                });
                        });
                });

            modelBuilder.Entity("Model.Users.Employee.Doctor", b =>
                {
                    b.HasOne("Model.HospitalResources.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.UserAccounts.EmployeeAccount", b =>
                {
                    b.HasOne("Model.Users.Employee.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.UserAccounts.PatientAccount", b =>
                {
                    b.HasOne("Model.Users.Patient.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
